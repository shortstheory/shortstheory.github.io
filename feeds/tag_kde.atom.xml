<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>A Singularity</title><link href="http://arnavdhamija.com/" rel="alternate"></link><link href="http://arnavdhamija.com/feeds/tag_kde.atom.xml" rel="self"></link><id>http://arnavdhamija.com/</id><updated>2017-08-17T20:00:00+05:30</updated><entry><title>Akademy 2017</title><link href="http://arnavdhamija.com/blog/akademy-2017.html" rel="alternate"></link><updated>2017-08-17T20:00:00+05:30</updated><author><name>Arnav Dhamija</name></author><id>tag:arnavdhamija.com,2017-08-17:blog/akademy-2017.html</id><summary type="html">&lt;p&gt;Last month, I attended KDE's annual conference, &lt;a href="https://akademy.kde.org/"&gt;Akademy 2017&lt;/a&gt;. This year, it was held in Almeria, a small Andalusian city on the south-east coast of Spain.&lt;/p&gt;
&lt;p&gt;The name of the conference is no misspelling, it's part of KDE's age old tradition of naming everything to do with KDE with a 'k'.&lt;/p&gt;
&lt;p&gt;It was a collection of amazing, life-changing experiences. It was my first solo trip abroad and it taught me so much about travel, KDE, and getting around a city with only a handful of broken phrases in the local language.&lt;/p&gt;
&lt;h2&gt;Travel&lt;/h2&gt;
&lt;p&gt;My trip began from the recently renamed Kempegowda International Airport, Bangalore. Though the airport is small for an international airport, the small size of the airport works to its advantage as it is very easy to get around. Check-in and immigration was a breeze and I had a couple of hours to check out the loyalty card lounge, where I sipped soda water thinking about what the next seven days had in store.&lt;/p&gt;
&lt;p&gt;The first leg of my trip was on a Etihad A320 to Abu Dhabi, a four hour flight departing at 2210 on 20 July. The A320 isn't particularly unique equipment, but then again, it was a rather short leg. The crew onboard that flight seemed to be a mix of Asian and European staff.&lt;/p&gt;
&lt;p&gt;Economy class in Etihad was &lt;em&gt;much&lt;/em&gt; better than any other Economy class product I'd seen before. Ample legroom, very clean and comfortable seats, and an excellent IFE system. I was content looking at the HUD-style map visualisation which showed the AoA, vertical speed, and airspeed of the airplane.&lt;/p&gt;
&lt;p&gt;On the way, I scribbled a quick diary entry and started reading part 1 of Sanderson's Stormlight Archive - 'The Way of Kings'.&lt;/p&gt;
&lt;p&gt;Descent to Abu Dhabi airport started about 3:30 into the flight. Amber city lights illuminated the desert night sky. Even though it was past midnight, the plane's IFE reported an outside temperature of 35C. Disembarking from the plane, the muggy atmosphere hit me after spending four hours in an air-conditioned composite tube.&lt;/p&gt;
&lt;p&gt;The airport was dominated by Etihad aircraft - mainly Airbus A330s, Boeing 787-8s, and Boeing 777-300ERs. There were also a number of other airlines part of the Etihad Airways Partners Alliance such as Alitalia, Jet Airways, and some Air Berlin equipment. As it was a relatively tight connection, I didn't stop to admire the birds for too long. I traversed a long terminal to reach the boarding gate for the connecting flight to Madrid.&lt;/p&gt;
&lt;p&gt;The flight to Madrid was another Etihad operated flight, only this time on the A320's larger brethren - the A330-200. This plane was markedly older than the A320 I had been on the first leg of the trip. Fortunately, I got the port side window seat in a 2-5-2 configuration. The plane had a long take-off roll and took off a few minutes after 2am. Once we reached cruising altitude, I opened the window shade. The clear night sky was full of stars and I must have spent at least five minutes with my face glued to the window.&lt;/p&gt;
&lt;p&gt;I tried to sleep, preparing myself for the long day ahead. Soon after waking up, the plane landed at Madrid Barajas Airport and taxied for nearly &lt;em&gt;half-an-hour&lt;/em&gt; to reach the terminal. After clearing immigration, I picked up my suitcase and waited for a bus which would take me to my next stop - the Madrid Atocha Railway Station. Located in the heart of city, the Atocha station is one of Madrid's largest train stations and connects it to the rest of Spain. My train to Almeria was later that day - at 3:15 in the afternoon.&lt;/p&gt;
&lt;p&gt;On reaching Atocha, I got my first good look at Madrid.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://arnavdhamija.com/images/akademy2017/resized/IMG_20170721_094946172.jpg" /&gt;     &lt;/p&gt;
&lt;p&gt;&lt;em&gt;My facial expression was quite similar&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://arnavdhamija.com/images/akademy2017/resized/IMG_20170721_114110394.jpg" /&gt;          &lt;/p&gt;
&lt;p&gt;I was struck by how orderly everything was, starting with the traffic. Cars gave the right of way to pedestrians. People walked on zebra crossings and cyclists stuck to the defined cycling lanes. A trivial detail, but it was a world apart from Bangalore. Shining examples of Baroque and Gothic architecture were scattered among newer establishments.&lt;/p&gt;
&lt;p&gt;Having a few hours to kill before I had to catch my train, I roamed around Buen Retiro Park, one of Spain's largest public parks. It was a beautiful day, bright and sunny with the warmth balanced out by a light breeze.&lt;/p&gt;
&lt;p&gt;My heavy suitcase compelled me to walk slowly which let me take in as much as I could. Retiro Park is a popular stomping ground for joggers, skaters, and cyclists alike. Despite it being 11am on a weekday, I saw plenty of people jogging though the park. After this, I trudged through some quaint cobbled neighbourhoods with narrow roads and old apartment buildings dotted with small shops on the ground floor.&lt;/p&gt;
&lt;p&gt;Maybe it was the sleep-deprivation or dehydration after a long flight, but everything felt so surreal! I had to pinch myself a few times - to believe that I had come thousands of miles from home and was actually travelling on my own in a foreign land.&lt;/p&gt;
&lt;p&gt;I returned to Atocha and waited for my train. By this time, I came to realise that language was going to be a problem for this trip as very few people spoke English and my Spanish was limited to a few basic phrases - notably 'No hables Espanol' and 'Buenos Dias' :P Nevertheless, the kind folks at the station helped me find the train platform.&lt;/p&gt;
&lt;p&gt;Trains in Spain are operated by state-owned train companies. In my case, I would be travelling on a Renfe train going till Almeria. The coaches are arranged in a 2-2 seating configuration, quite similar to those in airplanes, albeit with more legroom and charging ports. The speed of these trains is comparable to fast trains in India, with a top speed of about 160km/hr. The 700km journey was scheduled to take about 7 hours. There was plenty of scenery on the way with sloping mountain ranges and deserted valleys.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://arnavdhamija.com/images/akademy2017/resized/IMG_20170721_210241975.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Big windows encouraged sightseeing&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;After seven hours, I reached the Almeria railway station at 10pm. According to Google Maps, the hostel which KDE had booked for all the attendees was only 800m away - well within walking distance. However, unbeknownst to me, I started walking in the opposite direction (my phone doesn't have a compass!). This kept increasing the Google Maps ETA and only when I was 2km off track I realised something was very wrong. Fortunately, I managed to get a taxi to take me to Residencia Civitas - a university hostel where all the Akademy attendees would be staying for the week.&lt;/p&gt;
&lt;p&gt;After checking in to Civitas, I made my way to the double room. Judging from the baggage and the shoes in the corner, someone had moved in here before I did. About half an hour later, I found out who - &lt;a href="https://github.com/rahulyadav170923"&gt;Rahul Yadav&lt;/a&gt;, a fourth year student at DTU, Delhi. Exhausted after an eventful day of travel, I switched off the lights and went to sleep.&lt;/p&gt;
&lt;h2&gt;The Conference&lt;/h2&gt;
&lt;p&gt;The next day, I got to see other the Akademy attendees over breakfast at Civitas. In all, there were about 60-70 attendees, which I was told was slightly smaller than previous years.&lt;/p&gt;
&lt;p&gt;The conference was held at University of Almer√≠a, located a few kilometres from the hostel. KDE had hired a public bus for transport to and from the hostel for all the days of the conference. The University was a stone's throw from the Andalusian coastline. After being seated in one of the larger lecture halls, Akademy 2017 was underway.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://arnavdhamija.com/images/akademy2017/resized/IMG_20170722_135420112.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Konqi! And KDE Neon!&lt;/em&gt;    &lt;/p&gt;
&lt;p&gt;The keynote talk was by Robert Kayne of Metabrainz, about the story of how MusicBrainz was formed out of the ashes of CDDB. The talk set the tone for the first day of Akademy.&lt;/p&gt;
&lt;p&gt;The coffee break after the first two talks was much needed. I was grappling with sleep deprivation and jet lag from the last two days and needed all the caffeine and sugar I could get to keep myself going for the rest of the day. Over coffee, I caught up with some KDE developers I met at QtCon.&lt;/p&gt;
&lt;p&gt;Throughout the day, there were a lot of good talks, notably 'A bit on functional programming', and five quick lightning talks on a variety of topics. Soon after this, it was time for my very own talk - &lt;a href="https://conf.kde.org/en/akademy2017/public/events/337"&gt;'An Introduction to the KIO Library'&lt;/a&gt;.&lt;/p&gt;
&lt;!-- The KIO Library is a neat abstraction used by many applications. It allows applications to access data from a wide variety of local and network protocols without having to implement special code to handle the aforementioned protocol. This makes it easy to add file management capabilities in KDE applications and the API is used extensively in Dolphin. --&gt;

&lt;p&gt;The audience for my talk consisted of developers with several times my experience. Much to my delight, the &lt;em&gt;maintainer&lt;/em&gt; of the KIO Library, David Faure was in the audience as well!&lt;/p&gt;
&lt;p&gt;Here's where I learned another thing about giving presentations - they never quite go as well as it seems to go when rehearsed alone. I ended up speaking faster than I planned to, leaving more than enough time for a QA round. Just as I was wary about, I was asked some questions about the low-level implementation of KIO which thankfully David fielded for me. I was perspiring after the presentation, and it wasn't the temperature which was the problem üòÖ A thumbs up from David afterwards gave me some confidence that I had done alright.&lt;/p&gt;
&lt;p&gt;Following this, I enjoyed David Edmundson's talk about Binding properties in QML. The next presentation I attended after this is where things ended up getting heated. Paul Brown went into detail about everything wrong with &lt;a href="https://techbase.kde.org/Kirigami"&gt;Kirigami's TechBase&lt;/a&gt; page. This drew some, for lack of a better word, passionate people to retaliate. Though it was it was only supposed to be a 10 minute lightning talk, the debate raged on for half-an-hour among the two schools of thought of how TechBase documentation should be written. The only thing which brought the discussion to an end was the bus for returning to Civitas leaving sharp at 8pm.&lt;/p&gt;
&lt;p&gt;Still having a bit of energy left after the conference, I was ready to explore this Andalusian city. One thing which worked out nicely on this trip is the late sunset in Spain around this time of the year. It is as bright as day even at around 9pm and the light only starts waning at around 930pm. This gave Rahul and me plenty of time to head to the beach, which was about a 20 minute walk from the hostel.&lt;/p&gt;
&lt;p&gt;Here, it struck me how much I loved the way of life here.&lt;/p&gt;
&lt;p&gt;Unlike Madrid, Almeria is not a known as a tourist destination so most of the people living there were locals. In a span of about half an hour I watched how an evening unfolds in this city. As the sun started dipping below the horizon, families with kids, college couples, and high-school friends trickled from the beach to the boardwalk for dinner. A typical evening looked delightfully simple and laid-back in this peaceful city.&lt;/p&gt;
&lt;p&gt;The boardwalk had plenty of variety on offer - from seafood to Italian cuisine. One place caught my eye, a small cafe with Doner Kebab called 'Taj Mahal'. After a couple of days of eating nothing but bland sandwiches, Rahul and I were game for anything with a hint of spice of it. As I had done in Madrid, I tried ordering Doner Kebab using a mixture of broken Spanish and improvised sign language, only to receive a reply from the owner in Hindi! It turned out that the owner of the restaurant was Pakistani and had migrated to Spain seven years ago. Rahul made a point to ask for more chilli - and the Doner kebabs we got were not lacking in spice. I had more chilli in one kebab than I would normally would have had in a week. At least it was a change from Spanish food, which I wasn't all that fond of.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://arnavdhamija.com/images/akademy2017/resized/IMG_20170722_210643404.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;View from the boardwalk&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://arnavdhamija.com/images/akademy2017/resized/IMG_20170723_212852615.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;The next day was similar to the first, only a lot more fun. I spent a lot amount of time interacting with the people from KDE India. I also got to know my GSoC mentor, Boudhayan Gupta (@BaloneyGeek). The talks for this day were as good as the ones yesterday and I got to learn about Neon Docker images, the story behind KDE's Slimbook laptop, and things to look forward to in C++17/20.&lt;/p&gt;
&lt;p&gt;The talks were wrapped up with the Akademy Awards 2017.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://arnavdhamija.com/images/akademy2017/resized/IMG_20170723_171825707.jpg" /&gt;           &lt;/p&gt;
&lt;p&gt;&lt;em&gt;David Faure and Kevin Ottens&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There were still 3 hours of sunlight left after the conference and not being ones to waste it, we headed straight for the beach. Boudhayan and I made a treacherous excursion out to a rocky pier covered with moss and glistening with seawater. My well-worn sandels were the only thing keeping me from slipping onto a bunch of sharply angled stones jutting out from the waves. Against my better judgement, I managed to reach the end of the pier only to see a couple of crabs take interest in us. With the tide rising and the sun falling, we couldn't afford to stay much longer so we headed back to the beach just as we came. Not long after, I couldn't help myself and I headed into the water with enthusiasm I had only knew as a child. Probably more so for BaloneyGeek though, who headed in headfirst with his three-week-old Moto G5+ in his pocket (Spoiler: the phone was irrevocably damaged from half a minute of being immersed in saltwater). In the midst of this, we found a bunch of KDE folks hanging out on the beach with several boxes of pizza and bottles of beer. Free food!&lt;/p&gt;
&lt;p&gt;Exhausted but exhilarated, we headed back to Civitas to end another very memorable day in Almeria.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://arnavdhamija.com/images/akademy2017/resized/IMG_20170723_212706271.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Estacion Intermodal, a hub for public transport in Almeria&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;With the talks completed, Akademy 2017 moved on to its second leg, which consisted more of BoFs (&lt;a href="https://en.wikipedia.org/wiki/Birds_of_a_feather_(computing)"&gt;Birds of a Feather&lt;/a&gt;) and workshops.&lt;/p&gt;
&lt;p&gt;The QML workshop organised by Anu was timely as my relationship with QML has been hot and cold. I would always go in circles with the QML Getting Started tutorials as there aren't as many examples of how to use QtQuick 2.x as there are with say, Qt Widgets. I understood how to integrate JavaScript with the QML GUI and I will probably get around to making a project with the toolkit when I get the time. Paul Brown held a BoF about writing good user documentation and deconstructed some more pretentious descriptions of software with suggestions on how to avoid falling into the same pitfalls. I sat on a few more BoFs after this, but most of the things went over my head as I wasn't contributing to the projects discussed there.&lt;/p&gt;
&lt;p&gt;Feeling a bit weary of the beach, Rahul and I decided to explore the inner parts of the city instead. We planned to go to the Alcazaba of Almeria, a thousand-year-old fortress in the city. On the way, we found a small froyo shop and ordered a scoop with chocolate sauce and lemon sauce. Best couple of euros spent ever! I loved the tart flavour of the froyo and how it complemented the toppings with its texture.&lt;/p&gt;
&lt;p&gt;This gastronomic digression aside, we scaled a part of the fort only to find it locked off with a massive iron door. I got the impression that the fort was rarely ever open to begin with. With darkness fast approaching, we found ourselves in a dodgy neighbourhood and we tried to get out as fast as we could without drawing too much attention to ourselves. This brought an end to my fourth night in Almeria.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://arnavdhamija.com/images/akademy2017/resized/IMG_20170724_213148815_BURST001.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;View from Alcazaba&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The BoFs continued throughout the 25&lt;sup&gt;th&lt;/sup&gt;, the last full day of Akademy 2017. I participated in the GSoC BoF where KDE's plans for future GSoCs, SoKs, and GCIs were discussed (isn't that a lot of acronyms!). Finally, this was one topic where I could contribute to the discussion. If there was any takeaway from the discussion for GSoC aspirants, it is to start as early as you can!&lt;/p&gt;
&lt;p&gt;I sat on some other BoFs as well, but most of the discussed topics were out of my scope. The Mycroft and VDG BoF did have some interesting exchange of ideas for future projects that I might consider working on if I get &lt;em&gt;free&lt;/em&gt; time in the future.&lt;/p&gt;
&lt;p&gt;Rahul was out in the city that day, so I had the evening to explore Almeria all by myself.&lt;/p&gt;
&lt;p&gt;I fired up Google Maps to see anything of interest nearby. To the west of the hostel was a canal I hadn't seen previously so I thought it would be worth a trip. Unfortunately, because of my poor navigation skills and phone's lack of compass, I ended up circling a flyover for a while before ditching the plan. I decided to go to the beach as a reference point and explore from there.&lt;/p&gt;
&lt;p&gt;What was supposed to be a reference point ended up becoming the destination. There was still plenty of sunlight and the water wasn't too cold. I put one toe in the water, and then a foot.&lt;/p&gt;
&lt;p&gt;And then, I &lt;em&gt;ran&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Running barefoot alone the coastline was one of the best memories I have of the trip. For once, I didn't think twice about what I was doing. It was pure liberation. I didn't feel the exertion or the pebbles pounding my feet.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://arnavdhamija.com/images/akademy2017/resized/IMG_20170725_205642101.jpg" /&gt;           &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Almeria's Beaches&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The end of the coastline had a small fort and a dirt trail which I would've very much wanted to cycle on. After watching the sun sink into the sea, I ran till the other end of the boardwalk to find an Italian restaurant with &lt;strong&gt;vegetarian&lt;/strong&gt; spinach spaghetti. Served with a piece of freshly baked bread, dinner was delicious and capped off yet another amazing day in Almeria.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://arnavdhamija.com/images/akademy2017/resized/IMG_20170725_222250909.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Dinner time!&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Day Trip&lt;/h2&gt;
&lt;p&gt;The 26&lt;sup&gt;th&lt;/sup&gt; was the final day of the conference. Unlike the other days, the conference was only for half a day with the rest of the day kept aside for a day trip. I cannot comment on how the conference went on this day as I had to rush back to the hostel to retrieve my passport, which was necessary to attend the day trip.&lt;/p&gt;
&lt;p&gt;Right around 2 in the afternoon we boarded the bus for the day trip. Our first stop was the Plataforma Solar de Almer√≠a, a solar energy research plant in Almeria. It houses some large heliostats for focussing sunlight at a point on a tower. This can be used for heating water and producing electricity.&lt;/p&gt;
&lt;p&gt;There was another facility used for testing the tolerance of spacecraft heat shields by subjecting them to temperatures in excess of 2000C.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://arnavdhamija.com/images/akademy2017/resized/IMG_20170726_152443372.jpg" /&gt;           &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Heliostats focus at the top of the tower&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The next stop was at the San Jos√© village. Though not too far from Almeria, the village is frequented by tourists much more than Almeria is and has a very different vibe. The village is known for its beaches, pristine clear waters, and white buildings. I was told that the village was used in the shooting of some films such as The Good, The Bad, and The Ugly.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://arnavdhamija.com/images/akademy2017/resized/IMG_20170726_173502801.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Our final stop for the day was at the Rodalquilar Gold Mine. Lost to time, the mine had been shut down in 1966 due to the environmental hazards of using cyanide in the process to sediment gold. The mine wouldn't have looked out of place in a video-game or an action movie, and indeed, it was used in the filming of Indiana Jones and the Last Crusade. There was a short trek from the base of the mine to a trail which wrapped around a hill. After descending from the top we headed back to the hostel.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://arnavdhamija.com/images/akademy2017/resized/IMG_20170726_190645909.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;This concluded my stay in Almeria.&lt;/p&gt;
&lt;h2&gt;Madrid&lt;/h2&gt;
&lt;p&gt;After checking out of the hostel early the next morning, I caught a train to Madrid. I had a day in the city before my flight to Bangalore the next day.&lt;/p&gt;
&lt;p&gt;I reached Atocha at about 2 in the afternoon and checked in to a hotel. I spent the entire evening exploring Madrid on foot and an electric bicycle through the BiciMAD rental service.&lt;/p&gt;
&lt;h3&gt;Photo Dump&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="http://arnavdhamija.com/images/akademy2017/resized/IMG_20170727_070806970.jpg" /&gt;
&lt;img alt="" src="http://arnavdhamija.com/images/akademy2017/resized/IMG_20170727_142622000.jpg" /&gt;
&lt;img alt="" src="http://arnavdhamija.com/images/akademy2017/resized/IMG_20170727_161202727.jpg" /&gt;
&lt;img alt="" src="http://arnavdhamija.com/images/akademy2017/resized/IMG_20170727_163629143.jpg" /&gt;
&lt;img alt="" src="http://arnavdhamija.com/images/akademy2017/resized/IMG_20170727_170914992.jpg" /&gt;
&lt;img alt="" src="http://arnavdhamija.com/images/akademy2017/resized/IMG_20170727_173745292.jpg" /&gt;
&lt;img alt="" src="http://arnavdhamija.com/images/akademy2017/resized/IMG_20170727_184840175.jpg" /&gt;
&lt;img alt="" src="http://arnavdhamija.com/images/akademy2017/resized/IMG_20170727_190420712.jpg" /&gt;
&lt;img alt="" src="http://arnavdhamija.com/images/akademy2017/resized/IMG_20170727_194115723.jpg" /&gt;
&lt;img alt="" src="http://arnavdhamija.com/images/akademy2017/resized/IMG_20170727_194935333.jpg" /&gt;
&lt;img alt="" src="http://arnavdhamija.com/images/akademy2017/resized/IMG_20170727_202014639.jpg" /&gt;
&lt;img alt="" src="http://arnavdhamija.com/images/akademy2017/resized/IMG_20170727_205415016.jpg" /&gt;&lt;/p&gt;
&lt;h2&gt;The Return&lt;/h2&gt;
&lt;p&gt;My flight back home was on the following morning, on the 28 July. The first leg of the return was yet again, on an Etihad aircraft bound for Abu Dhabi. This time it was an A330-300. It was an emotional 8 hour long flight - with the memories of Akademy still fresh in my mind. To top it off, I finished &lt;a href="https://en.wikipedia.org/wiki/EarthBound"&gt;EarthBound&lt;/a&gt; (excellent game!) during the flight.&lt;/p&gt;
&lt;p&gt;Descent into Abu Dhabi started about half an hour before landing. This time though, I got to see the bizarre Terminal 1 dome of the Abu Dhabi airport. The Middle East has always been a mystical place for me. The prices of food and drink in the terminal were hard to stomach - 500mL of water was an outrageous 8 UAE Dirhams (‚Çπ140)! Thankfully it wasn't a very long layover, so I didn't have to spend too much.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://arnavdhamija.com/images/akademy2017/resized/IMG_20170728_180441863.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note to self: may cause tripping if stared at for too long&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The next leg was a direct flight to Bangalore, on another Etihad A330. Compared to all the travel I had done in the last two days, the four hour flight almost felt too short. I managed to finish 'Your Lie in April' on this leg.&lt;/p&gt;
&lt;p&gt;It was a mix of emotions to land in Bangalore - I was glad to have reached home, but bitter that I had to return to college in only two days.&lt;/p&gt;
&lt;p&gt;Akademy 2017 was an amazing trip and I am very grateful to KDE for letting me present at Akademy and for giving me the means of reaching there. I hope I can make more trips like these in the future!&lt;/p&gt;</summary><category term="KDE"></category><category term="Life"></category><category term="Travel"></category></entry><entry><title>KIO Stash - Shipped!</title><link href="http://arnavdhamija.com/blog/kio-stash-release.html" rel="alternate"></link><updated>2017-07-04T11:30:00+05:30</updated><author><name>Arnav Dhamija</name></author><id>tag:arnavdhamija.com,2017-07-04:blog/kio-stash-release.html</id><summary type="html">&lt;p&gt;It's been almost a year since I finished my GSoC project for implementing discontinuous file selections as a KIOSlave.&lt;/p&gt;
&lt;p&gt;The ioslave is now officially shipped in the KDE ExtraGear Utils software package and it can be downloaded from here: &lt;a href="https://download.kde.org/stable/kio-stash/kio-stash-1.0.tar.xz.mirrorlist"&gt;https://download.kde.org/stable/kio-stash/kio-stash-1.0.tar.xz.mirrorlist&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Selecting multiple files in any file manager for copying and pasting has never been a pleasant experience, especially if the files are in a non-continuous order. Often, when selecting files using Ctrl+A or the selection tool, we find that we need to select only a subset of the required files we have selected. This leads to the unwieldy operation of removing files from our selection. Of course, the common workaround is to create a new folder and to put all the items in this folder prior to copying, but this is a very inefficient and very slow process if large files need to be copied. Moreover Ctrl+Click requires fine motor skills to not lose the entire selection of files.&lt;/p&gt;
&lt;p&gt;This is an original project with a novel solution to this problem. My solution is to add a virtual folder in all KIO applications, where the links to files and folders can be temporarily saved for a session. The files and folders are "staged" on this virtual folder. Files can be added to this by using all the regular file management operations such as Move, Copy and Paste, or by drag and drop. Hence, complex file operations such as moving files across many devices can be made easy by staging the operation before performing it.&lt;/p&gt;
&lt;h2&gt;Project Overview&lt;/h2&gt;
&lt;p&gt;This project consists of the following modules. As there is no existing implementation in KIO for managing virtual directories, all the following modules were written completely from scratch.&lt;/p&gt;
&lt;h3&gt;KIO Slave&lt;/h3&gt;
&lt;p&gt;The KIO slave is the backbone of the project. This KIO slave is responsible for interfacing with the GUI of a KDE application and provides the methods for various operations such as copying, deleting, and renaming files. All operations on the KIO slave are applied on a virtual stash filesystem (explained below). These operations are applied through inter process communication using the Qt's D-Bus API.&lt;/p&gt;
&lt;p&gt;The advantage of the KIO slave is that it provides a consistent experience throughout the entire KDE suite of applications. Hence, this feature would work with all KIO compatible applications.&lt;/p&gt;
&lt;h3&gt;Stash File System&lt;/h3&gt;
&lt;p&gt;The Stash File System (SFS) is used for virtually staging all the files and directories added to the ioslave. When a file is copied to the SFS, a new File Node is created to it under the folder to which it is copied. On copying a folder, a new Directory Node is created on the SFS with all the files and directories under it copied recursively as dictated by KIO. The SFS is a very important feature of the project as it allows the user to create folders and move items on the stash ioslave without touching the physical file system at all. Once a selection is curated on the ioslave, it can be seamlessly copied to the physical filesystem.&lt;/p&gt;
&lt;p&gt;The SFS is implemented using a QHash pair of the URL as a key, containing the location of the file on the SFS and the value containing a StashNodeData object which contains all the properties (such as file name, source, children files for directories) of a given node in SFS.&lt;/p&gt;
&lt;p&gt;Memory use of the SFS is nominal on a per file basis - each file staged on the SFS requires roughly 300 bytes of memory.&lt;/p&gt;
&lt;h3&gt;Stash Daemon&lt;/h3&gt;
&lt;p&gt;The Stash File System runs in the KDE Daemon (kded5) container process. An object of the SFS is created on startup when the daemon is initialized. The daemon responds to calls from the ioslave communicated over the session bus and creates and removes nodes in the SFS.&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Make sure you have KF5 backports with all the &lt;a href="https://community.kde.org/Guidelines_and_HOWTOs/Build_from_source/Install_the_dependencies"&gt;KDE dependency libraries&lt;/a&gt; installed before you build!&lt;/p&gt;
&lt;p&gt;Download the tarball to your favorite folder, extract, and run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir build
cd build
cmake -DCMAKE_INSTALL_PREFIX=/usr -DKDE_INSTALL_USE_QT_SYS_PATHS=TRUE ..
make
sudo make install
kdeinit5
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Result&lt;/h2&gt;
&lt;p&gt;Open Dolphin and set the path as &lt;code&gt;stash:/&lt;/code&gt;. This directory is completely 'virtual' and anything added to it will not consume any extra disk space. All basic file operations such as copy, paste, and move should work.&lt;/p&gt;
&lt;p&gt;Folders can be created, curated, and renamed on this virtual folder itself. However, as this is a virtual directory, files cannot be created on it.&lt;/p&gt;
&lt;p&gt;Copying from remote locations such as &lt;code&gt;mtp:/&lt;/code&gt; may not work however. Please report any bugs for the same on &lt;a href="http://bugs.kde.org/"&gt;http://bugs.kde.org/&lt;/a&gt;.&lt;/p&gt;</summary><category term="GSoC"></category><category term="KDE"></category></entry><entry><title>What I've been upto</title><link href="http://arnavdhamija.com/blog/this-semester-has-gone-little-too-fast.html" rel="alternate"></link><updated>2016-12-19T11:09:00+05:30</updated><author><name>Arnav Dhamija</name></author><id>tag:arnavdhamija.com,2016-12-19:blog/this-semester-has-gone-little-too-fast.html</id><summary type="html">&lt;p&gt;This semester has gone a &lt;em&gt;little&lt;/em&gt; too fast for my liking. Though there were
plenty of good memories and takeaways from this semester, it has been by far
my most stressful time in this college yet. Between taking on a number of
technical projects and trying to rescue a sharply falling SG due to a poor T1,
there has been very little free time this sem. Above all, this sem has shown
me just how limited of a resource brain power is. Thinking about solving
problems wears me out much more easily than it used to.  &lt;/p&gt;
&lt;p&gt;That's not to say what I've been doing is all drudgery. Some interesting
projects that I've been working on:  &lt;/p&gt;
&lt;h3&gt;GSoC 2016 Project - kio-stash&lt;/h3&gt;
&lt;p&gt;Yup, this &lt;a href="https://github.com/KDE/kio-stash"&gt;project&lt;/a&gt; has been in the pipeline
for months. While it (mostly) works on a clean install of KDE, it has some
bugs with copying with mtp:/ device slaves and isn't very well integrated with
Dolphin yet. It is in my best interest to have this shipped with KDE
Frameworks as soon as possible, so I'm looking into patching Dolphin with
better, more specific action support for my project.  &lt;/p&gt;
&lt;h3&gt;IEEE Signal Processing Cup 2017 - Real-Time Beat Tracking Challenge&lt;/h3&gt;
&lt;p&gt;The premise of this project doesn't seem very complicated - a team just needs
to submit an algorithm which can successfully detect the beats in a song in
real-time on an embedded device. Heck, I had already implemented the same on
an Arduino with a microphone for rather &lt;a href="https://www.youtube.com/watch?v=lMb1XScNgOs"&gt;fancy lighting in my hostel
room&lt;/a&gt;. Unfortunately, as I've
learned the hard way, anything that looks simple is deceptive and this project
is a perfect example. For one thing, a song by itself in the amplitude-time
domain is nearly impossible to extract any data from, so it requires a (Fast)
Fourier Transform to extract frequency bin amplitudes to get anything useful
from it. Next, obtaining beat onset and detection requires generating a
tempogram to find the BPM of a song to find the approximate beat positions.
There are many interesting approaches and different algorithms to solve this
problem. Fortunately, I'm not doing this alone and the seniors I'm working
with have a better understanding of the more difficult mathematical components
of this project, leaving me free to code in C++ and deploy it on actual
hardware.  &lt;/p&gt;
&lt;h3&gt;foss@bphc&lt;/h3&gt;
&lt;p&gt;This project is a society on campus I started with
&lt;a href="https://github.com/aero31aero/"&gt;three&lt;/a&gt;
&lt;a href="https://github.com/TestSubjector"&gt;programmers&lt;/a&gt; &lt;a href="https://github.com/Nischay-
Pro/"&gt;far&lt;/a&gt; more competent than myself. It all started in September this year
when we had the two-day long &lt;a href="https://www.mediawiki.org/wiki/Wikimedia_Hackathon_BPHC"&gt;Wikimedia
Hackathon&lt;/a&gt; on campus.
Though my contribution to Wikimedia was small, I got a lot out of the
hackathon by meeting the people from Amrita University who came for organising
the event. Listening to what
&lt;a href="https://www.mediawiki.org/wiki/User:01tonythomas"&gt;Tony&lt;/a&gt; and
&lt;a href="http://srijanagarwal.me/"&gt;Srijan&lt;/a&gt; had to say about how much working for
foss@amrita had benefited them made me realise how much room for improvement
there was in BPHC. As far as this society goes, things are still in their
infancy, yet I feel there is just enough critical mass of talent and
enthusiasm in open source development to push this society forward. We even
have our own
&lt;a href="https://fossbphc.github.io/docs/constitution.html"&gt;Constitution&lt;/a&gt;!  &lt;/p&gt;
&lt;h3&gt;Making a personal website?&lt;/h3&gt;
&lt;p&gt;While Blogspot has been a faithful home for this blog for over half a decade,
it is time to move to a modern solution for hosting. Plus setting up a website
will teach me a bit about web development too, and I've needed an excuse to
learn it for a while. Surely it can't be all that hard, right?  &lt;/p&gt;
&lt;h3&gt;Burnout&lt;/h3&gt;
&lt;p&gt;While the slew of all these technical projects seemed like a good idea at the
time, it has pushed me closer to burning out. It is the same feeling as what I
felt the same time last year, albeit for different reasons.  &lt;/p&gt;
&lt;p&gt;Some of it has carried over from studying harder at the end of this sem than I
had done so before. To my surprise, studying under pressure was actually more
effective than it was without. In some ways, it was a throwback to studying
for the number of exams nearly a couple of years ago. It has made me question
whether any of my education was as much for the knowledge as it was for the
desperation of avoiding failure. I still haven't figured it out, but at least
I feel like I'm not as adverse to putting in the hours for getting a decent
CGPA as I had been last semester.  &lt;/p&gt;
&lt;p&gt;There have been compromises in other spheres of college life as well,
investing so much time in studying or doing projects has made me cut down my
participation in other clubs and I've quit nearly all the non-technical clubs
I joined last year. There's more than that too - I feel it's much harder to be
fully immersed in anything anymore.  &lt;/p&gt;
&lt;p&gt;Maybe it's just something else which requires more soul searching.&lt;/p&gt;</summary><category term="College"></category><category term="Life"></category><category term="KDE"></category></entry><entry><title>GSoC Report - Wrapping up GSoC 2016</title><link href="http://arnavdhamija.com/blog/gsoc-report-wrapping-up-gsoc-2016.html" rel="alternate"></link><updated>2016-08-30T01:45:00+05:30</updated><author><name>Arnav Dhamija</name></author><id>tag:arnavdhamija.com,2016-08-30:blog/gsoc-report-wrapping-up-gsoc-2016.html</id><summary type="html">&lt;p&gt;That‚Äôs it. After a &lt;a href="https://github.com/KDE/kio-stash/graphs/contributors"&gt;combined total&lt;/a&gt; of 217 git commits, 6,202 lines of code added, and
4,167 lines of code deleted, GSoC 2016 is finally over.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://arnavdhamija.com/images/Screenshot_20160830_014801.png" /&gt;&lt;/p&gt;
&lt;p&gt;These twelve weeks of programming have been a very enriching experience for me
and making this project has taught me a lot about production quality software
development. Little did I know that a &lt;a href="https://github.com/shortstheory/filetray-very-early-alpha-idea-
thingy"&gt;small
project&lt;/a&gt; I had put together in a 6 hour session of messing around with Qt would
lead to something as big as this!  &lt;/p&gt;
&lt;p&gt;There have been many memorable moments throughout my coding period for the
GSoC - such as the first time I got an ioslave to
&lt;a href="http://arnavdhamija.com/blog/gsoc-update-1-beginning.html"&gt;install&lt;/a&gt; correctly, to writing its ‚ÄúHello World‚Äù
&lt;a href="http://arnavdhamija.com/blog/gsoc-update-writing-kio-slave-101.html"&gt;equivalent&lt;/a&gt;, and getting a basic implementation of the project up and
running by doing a series of dirty hacks with Dolphin‚Äôs code. There were also
times when I was so frustrated with debugging for this project, that I wanted
to do nothing but smash my laptop‚Äôs progressively failing display panel with
the largest hammer I could find. The great mentorship from my GSoC mentor and
the premise of the GSoC program itself kept me going. This also taught me an
important lesson with regards to software development - no one starting out
gets it right on their first try. It feels like after a long run of not quite
getting the results I wanted, the GSoC is the thing which worked out for me as
everything just fell into place.  &lt;/p&gt;
&lt;p&gt;There‚Äôs a technical digression here, which you can feel free to skip through
if you don‚Äôt want to get into the details of the project.  &lt;/p&gt;
&lt;p&gt;Following up from the &lt;a href="http://arnavdhamija.com/blog/gsoc-update-tinkering-with-kio.html"&gt;previous&lt;/a&gt; blog post, with the core features of the
application complete, I had moved on to unit testing my project. For this
project, unit testing involved writing test cases for each and every component
of the application to find and fix any bugs. Despite the innocuous name, unit
testing this project was a much bigger challenge than I expected. As for one
thing, the ioslave in my project is merely a controller in the MVC system of
the virtual Stash File System, the Dolphin file manager, and the KIO Slave
itself. Besides, most of the ioslave‚Äôs functions have a void return type, so
feeding the slave‚Äôs functions‚Äô arguments to get an output for checking was not
an option either.  &lt;/p&gt;
&lt;p&gt;This led me to use an approach, which my mentor aptly called ‚Äúblack box
testing‚Äù.  &lt;/p&gt;
&lt;p&gt;In this approach, one writes unit tests testing for a specific action and then
checking for whether the effects of the said action are as expected. In this
case, the ioslave was tested by giving it a test file and then apply some of
the ioslave‚Äôs functions such as copy, rename, delete, and stat. From there,
through a bunch of QVERIFY calls is to check whether the ioslave has completed
the operation successfully. Needless to say, this approach is far more
convoluted to write unit tests for as it required checking each and every test
file for its properties in every test case. Fortunately, the
&lt;a href="http://doc.qt.io/qt-4.8/qtestlib-manual.html#qtestlib"&gt;QTestLib&lt;/a&gt; API is
pretty well documented so it wasn‚Äôt difficult to get started with writing unit
tests. I also had a template of what a good test suite should look like thanks
to David Faure‚Äôs excellent work on implementing automated unit testing for the
Trash ioslave. With these two tools in hand, I started off with writing unit
tests shortly before the second year of college started.  &lt;/p&gt;
&lt;p&gt;As expected, writing black box unit tests was a PITA in its own right. The
first time I ran my unit test I came up with a dismal score of 6 unit tests
passed out of the 17 I had written. This lead me to go back and check whether
my unit tests were testing correctly at all. It turned out that I had made so
many mistakes with writing the unit tests that an entire rewrite of the test
suite wasn‚Äôt unwarranted.  &lt;/p&gt;
&lt;p&gt;With a rewrite of the test cases completed, I ran the test suite again. The
results were a bit better - 13 out of the 17 test cases passed, but 4 failed
test cases - enough reason for the project to be unshippable. Looking into the
issue a bit deeper, I found out that all the D-Bus calls to my ioslave for
copy and move operations were not working correctly! Given that I had spent so
much time on making sure the ioslave was robust enough, this was a mixed
surprise. Finally, after a week of rewriting and to an extent, refactoring the
rename and copy functions of the ioslave, I got the best terminal output I
ever wanted from this project.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://arnavdhamija.com/images/Screenshot_20160829_184812.png" /&gt;&lt;/p&gt;
&lt;p&gt;Definitely the highest point of the GSoC for me. From there on out, it was a
matter of putting the code on the slow burner for cleaning up any leftover
debug statements and for writing documentation for other obscure sections.
With a net total of nearly 2000 lines of code, it far surpasses any other
project I‚Äôve done in terms of size and quality of code written.  &lt;/p&gt;
&lt;p&gt;At some points in the project, I felt that the stipend was far too generous,
for many people working on KDE &lt;em&gt;voluntarily&lt;/em&gt; produce projects much larger
thann mine. In the end, I feel the best way to repay the generosity is to
continue with open source development - just as the GSoC intended. Prior to
the GSoC, open source was simply an interesting concept to me, but
contributing a couple of thousands of lines of code to an open source codebase
has made me realise just how powerful open source is. There were no
restrictions on when I had to work (usually my productivity was at its peak at
outlandish late night hours), on the machine I used for coding (a trusty
IdeaPad, replaced with a much nicer ThinkPad), or on the place where I felt
most comfortable coding from (a toss up between my much used study table or
the living room). In many ways, working from home was probably the &lt;em&gt;best&lt;/em&gt;
environment I could ask for when it came to working on this project. Hacking
on an open source project gave me a sense of gratification solving a problem
in competitive programming never could have.  &lt;/p&gt;
&lt;p&gt;The Google Summer of Code may be over, but my journey with open source
development has just begun. Here‚Äôs to even bigger and better projects in the
future!&lt;/p&gt;</summary><category term="GSoC"></category><category term="KDE"></category></entry><entry><title>GSoC Update: Tinkering with KIO</title><link href="http://arnavdhamija.com/blog/gsoc-update-tinkering-with-kio.html" rel="alternate"></link><updated>2016-07-21T15:18:00+05:30</updated><author><name>Arnav Dhamija</name></author><id>tag:arnavdhamija.com,2016-07-21:blog/gsoc-update-tinkering-with-kio.html</id><summary type="html">&lt;p&gt;I'm a lot closer to finishing the project now. Thanks to some great support
from my GSoC mentor, my project has turned out better than what I had written
about in my proposal! Working together, we've made a lot of changes to the
project.  &lt;/p&gt;
&lt;p&gt;For starters, we've changed the name of the ioslave from "File Tray" to
"staging" to "stash". I wasn't a big fan of the name change, but I see the
utility in shaving off a couple of characters in the name of what I hope will
be a widely used feature.  &lt;/p&gt;
&lt;p&gt;Secondly, the ioslave is now completely independent from Dolphin, or any KIO
application for that matter. This means it works &lt;em&gt;exactly&lt;/em&gt; the same way across
the entire suite of KIO apps. Given that at one point we were planning to make
the ioslave fully functional only with Dolphin, this is a major plus point for
the project.  &lt;/p&gt;
&lt;p&gt;Next, the backend for storing stashed files and folders has undergone a
complete overhaul. The first iteration of the project stored files and folders
by saving the URLs of stashed items in a QList in a custom "stash" daemon
running on top of kded5. Although this was a neat little solution which worked
well for most intents and purposes, it had some disadvantages. For one, you
couldn't delete and move files around on the ioslave without affecting the
source because they were all linked to their original directories. Moreover,
with the way 'mkdir' works in KIO, this solution would never work without each
application being specially configured to use the ioslave which would entail a
lot of groundwork laying out QDBus calls to the stash daemon. With these
problems looming large, somewhere around the midterm evaluation week, I got a
message from my mentor about ramping up the project using a "StashFileSystem",
a virtual file system in Qt that he had written just for this project.  &lt;/p&gt;
&lt;p&gt;The virtual file system is a clever way to approach this - as it solved both
of the problems with the previous approach right off the bat - mkdir could be
mapped to virtual directory and now making volatile edits to folders is
possible without touching the source directory. It did have its drawbacks too - as it needed to stage every file in the source directory, it would require a
lot more memory than the previous approach. Plus, it would still be at the
whims of kded5 if a contained process went bad and crashed the daemon.  &lt;/p&gt;
&lt;p&gt;Nevertheless, the benefits in this case far outweighed the potential cons and
I got to implementing it in my ioslave and stash daemon. Using this virtual
file system also meant remapping all the SlaveBase functions to corresponding
calls to the stash daemon which was a complete rewrite of my code. For
instance, my GitHub log for the week of implementing the virtual file system
showed a sombre 449++/419--. This isn't to say it wasn't productive though -
to my surprise the virtual file system actually worked better than I hoped it
would! Memory utilisation is low at a nominal ~300 bytes per stashed file and
the performance in my manual testing has been looking pretty good.  &lt;/p&gt;
&lt;p&gt;With the ioslave and other modules of the application largely completed, the
current phase of the project involves integrating the feature neatly with
Dolphin and for writing a couple of unit tests along the way. I'm looking
forward to a good finish with this project.  &lt;/p&gt;
&lt;p&gt;You can find the source for it here: &lt;a href="https://github.com/KDE/kio-stash"&gt;https://github.com/KDE/kio-stash&lt;/a&gt; (did I
mention it's now hosted on a &lt;a href="https://quickgit.kde.org/?p=kio-
stash.git"&gt;KDE repo&lt;/a&gt;? ;) )&lt;/p&gt;</summary><category term="GSoC"></category><category term="KDE"></category></entry><entry><title>GSoC Update(?): Writing a KIO slave 101!</title><link href="http://arnavdhamija.com/blog/gsoc-update-writing-kio-slave-101.html" rel="alternate"></link><updated>2016-06-21T23:35:00+05:30</updated><author><name>Arnav Dhamija</name></author><id>tag:arnavdhamija.com,2016-06-21:blog/gsoc-update-writing-kio-slave-101.html</id><summary type="html">&lt;p&gt;This &lt;a href="https://summerofcode.withgoogle.com/projects/#5979393230897152"&gt;project&lt;/a&gt;
has been going well. Though it was expectedly difficult in the beginning, I
feel like I am on the other side of the learning curve now. I will probably
make a proper update post sometime later this month. My repo for this project
can be found here: &lt;a href="https://github.com/KDE/kio-stash"&gt;https://github.com/shortstheory/kio-stash&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For now, this is a small tutorial for writing KDE I/O slaves (KIO slaves)
which can be used for a variety of KDE applications. KIO slaves are a great
way for accessing files from different filesystems and protocols in a neat,
uniform way across many KDE applications. Their versatility makes them
integral to the KIO library. KIO slaves have changed in their structure the
transition to KF5 and this tutorial highlights some of these differences from
preceding iterations of it.&lt;/p&gt;
&lt;h3&gt;Project Structure&lt;/h3&gt;
&lt;p&gt;For the purpose of this tutorial, your project source directory needs to have
the following files.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kio_hello.h&lt;/li&gt;
&lt;li&gt;kio_hello.cpp&lt;/li&gt;
&lt;li&gt;hello.json&lt;/li&gt;
&lt;li&gt;CMakeLists.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you don't feel like creating these yourself, just clone it from here:
&lt;a href="https://github.com/shortstheory/kioslave-tutorial"&gt;https://github.com/shortstheory/kioslave-tutorial&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;hello.json&lt;/h4&gt;
&lt;p&gt;The .json file replaces the .protocol files used in KIO slaves pre KF5. The
.json file for the KIO slave specifies the properties the KIO slave will have
such as the executable path to the KIO slave on installation. The .json file
also includes properties of the slave such as being able to read from, write
to, delete from, among many others. Fields in this .json file are specified
from the &lt;a href="https://api.kde.org/frameworks/kio/html/classKProt
ocolManager.html"&gt;KProtocolManager&lt;/a&gt; class. For creating a KIO slave capable of showing a
directory in a file manager such as Dolphin, the listing property must be set
to true. As an example, the .json file for the Hello KIO slave described in
this tutorial looks like this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{  
    &amp;quot;KDE-KIO-Protocols&amp;quot; : {   
        &amp;quot;hello&amp;quot;: {   
            &amp;quot;Class&amp;quot;: &amp;quot;:local&amp;quot;,   
            &amp;quot;X-DocPath&amp;quot;: &amp;quot;kioslave5/kio_hello.html&amp;quot;,   
            &amp;quot;exec&amp;quot;: &amp;quot;kf5/kio/hello&amp;quot;,   
            &amp;quot;input&amp;quot;: &amp;quot;none&amp;quot;,   
            &amp;quot;output&amp;quot;: &amp;quot;filesystem&amp;quot;,   
            &amp;quot;protocol&amp;quot;: &amp;quot;hello&amp;quot;,   
            &amp;quot;reading&amp;quot;: true   
        }   
    }   
}  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As for the CMakeLists.txt, you will need to link your KIO slave module with
KF5::KIOCore. This can be seen in the project directory.  &lt;/p&gt;
&lt;h4&gt;kio_hello.h&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#ifndef HELLO_H  &lt;/span&gt;
&lt;span class="cp"&gt;#define HELLO_H  &lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;kio/slavebase.h&amp;gt;  &lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/**  &lt;/span&gt;
&lt;span class="cm"&gt;  This class implements a Hello World kioslave  &lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;   
&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="nl"&gt;Hello&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;QObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;KIO&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SlaveBase&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="n"&gt;Q_OBJECT&lt;/span&gt;   
&lt;span class="nl"&gt;public&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;QByteArray&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;QByteArray&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;QUrl&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Q_DECL_OVERRIDE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
&lt;span class="p"&gt;};&lt;/span&gt;  

&lt;span class="cp"&gt;#endif  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Hello KIO slave is derived from KIO::SlaveBase. The SlaveBase class has
some basic functions already implemented for the KIO slave. This can be found
in the &lt;a href="https://api.kde.org/frameworks/kio/html/classKIO_1_1Sla
veBase.html"&gt;documentation&lt;/a&gt;. However, most of the functions of SlaveBase are virtual
functions and have to be re-implemented for the KIO slave. In this case, we
are re-implementing the get function to print a QString when it is called by
kioclient5.  &lt;/p&gt;
&lt;p&gt;In case you don't need special handling of the KIO slave's functions, you can
derive your KIO slave class directly from &lt;a href="https://a
pi.kde.org/frameworks/kio/html/classKIO_1_1ForwardingSlaveBase.html"&gt;KIO::ForwardingSlaveBase&lt;/a&gt;. Here,
you would only need to re-implement the rewriteUrl function to get your KIO
slave working.  &lt;/p&gt;
&lt;h4&gt;kio_hello.cpp&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;hello.h&amp;quot;  &lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;QDebug&amp;gt;  &lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="nl"&gt;KIOPluginForMetaData&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;QObject&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="n"&gt;Q_OBJECT&lt;/span&gt;   
    &lt;span class="n"&gt;Q_PLUGIN_METADATA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IID&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;org.kde.kio.slave.hello&amp;quot;&lt;/span&gt; &lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hello.json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   
&lt;span class="p"&gt;};&lt;/span&gt;  

&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C&amp;quot;&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Q_DECL_EXPORT&lt;/span&gt; &lt;span class="n"&gt;kdemain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   
    &lt;span class="p"&gt;{&lt;/span&gt;   
        &lt;span class="n"&gt;qDebug&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Launching KIO slave.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;   
            &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Usage: kio_hello protocol domain-socket1 domain-socket2&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   
            &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   
        &lt;span class="p"&gt;}&lt;/span&gt;   
        &lt;span class="n"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;   
        &lt;span class="n"&gt;slave&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatchLoop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;   
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
    &lt;span class="p"&gt;}&lt;/span&gt;   
&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;QUrl&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="n"&gt;qDebug&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Entering function.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
    &lt;span class="n"&gt;mimeType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/plain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   
    &lt;span class="n"&gt;QByteArray&lt;/span&gt; &lt;span class="nf"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello world!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   
    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   
    &lt;span class="n"&gt;finished&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;   
    &lt;span class="n"&gt;qDebug&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Leaving function&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;QByteArray&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;QByteArray&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SlaveBase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;   

&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;hello.moc&amp;quot;  &lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The .moc file is, of course, auto-generated at compilation time.  &lt;/p&gt;
&lt;p&gt;As mentioned earlier, the KIO Slave's .cpp file will also require a new
KIOPluginForMetaData class to add the .json file. The following is used for
the hello KIO slave and can be used as an example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;KIOPluginForMetaData&lt;/span&gt; : &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;QObject&lt;/span&gt;  
{  
    &lt;span class="s"&gt;Q_OBJECT   &lt;/span&gt;
&lt;span class="s"&gt;    Q_&lt;/span&gt;&lt;span class="n"&gt;PLUGIN_METADATA&lt;/span&gt;(&lt;span class="n"&gt;IID&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;org.kde.kio.slave.hello&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;FILE&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hello.json&amp;quot;&lt;/span&gt;)   
};  
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;CMakeLists.txt&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cmake_minimum_required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;VERSION&lt;/span&gt; &lt;span class="s"&gt;3.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;QT_MIN_VERSION&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;5.4.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;KF5_MIN_VERSION&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;5.16.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="nb"&gt;find_package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;ECM&lt;/span&gt; &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;KF5_MIN_VERSION&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="s"&gt;REQUIRED&lt;/span&gt; &lt;span class="s"&gt;NO_MODULE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  
    &lt;span class="s"&gt;CMAKE_MODULE_PATH&lt;/span&gt;   
        &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CMAKE_MODULE_PATH&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;   
        &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ECM_MODULE_PATH&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;   
        &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ECM_KDE_MODULE_DIR&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;   
&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="nb"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;KDEInstallDirs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="nb"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;KDECMakeSettings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="nb"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;KDECompilerSettings&lt;/span&gt; &lt;span class="s"&gt;NO_POLICY_SCOPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="nb"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;ECMSetupVersion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="nb"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;FeatureSummary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="nb"&gt;add_library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;kio_hello&lt;/span&gt; &lt;span class="s"&gt;MODULE&lt;/span&gt; &lt;span class="s"&gt;hello.cpp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="nb"&gt;find_package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;KF5&lt;/span&gt; &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;KF5_MIN_VERSION&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="s"&gt;REQUIRED&lt;/span&gt; &lt;span class="s"&gt;KIO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="nb"&gt;target_link_libraries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;kio_hello&lt;/span&gt; &lt;span class="s"&gt;KF5::KIOCore&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="nb"&gt;set_target_properties&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;kio_hello&lt;/span&gt; &lt;span class="s"&gt;PROPERTIES&lt;/span&gt; &lt;span class="s"&gt;OUTPUT_NAME&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="nb"&gt;install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;TARGETS&lt;/span&gt; &lt;span class="s"&gt;kio_hello&lt;/span&gt; &lt;span class="s"&gt;DESTINATION&lt;/span&gt; &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;KDE_INSTALL_PLUGINDIR&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/kf5/kio&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Installation&lt;/h3&gt;
&lt;p&gt;Simply run the following commands in the source folder:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir build  
cd build  
cmake -DCMAKE_INSTALL_PREFIX=/usr -DKDE_INSTALL_USE_QT_SYS_PATHS=TRUE ..  
make  
sudo make install  
kdeinit5  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As shown above, we have to run kdeinit5 again so the new KIO slave is
discovered by KLauncher and can be loaded when we run a command through an
application such as kioclient5.&lt;br /&gt;
Testing  &lt;/p&gt;
&lt;p&gt;Run:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;kioclient5 &amp;#39;cat&amp;#39; &amp;#39;hello:/&amp;#39;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the output should be:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Hello_world
&lt;/pre&gt;&lt;/div&gt;</summary><category term="GSoC"></category><category term="Programming"></category><category term="KDE"></category></entry><entry><title>GSoC Update 1: The Beginning</title><link href="http://arnavdhamija.com/blog/gsoc-update-1-beginning.html" rel="alternate"></link><updated>2016-05-30T10:37:00+05:30</updated><author><name>Arnav Dhamija</name></author><id>tag:arnavdhamija.com,2016-05-30:blog/gsoc-update-1-beginning.html</id><summary type="html">&lt;p&gt;I have officially started my &lt;a href="https://summerofcode.withgoogle.com/projects/#5979393230897152"&gt;GSoC
project&lt;/a&gt; under
the mentorship of &lt;a href="https://blog.baloneygeek.com/"&gt;Boudhayan Gupta &lt;/a&gt;and &lt;a href="http://blog.pinak.me/"&gt;Pinak
Ahuja&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;The project idea's implementation has undergone some changes from what I
proposed. While the essence of the project is the same, it will now no longer
be dependent on Baloo and xattr. Instead, it will use a QList to hold a list
of staged files with a plugin to kiod. My next milestone before the mid-term
evaluation is to implement this in a KIO slave which will be compatible with
the whole suite of KDE applications.  &lt;/p&gt;
&lt;p&gt;For the last two weeks, I've been busy with going through hundreds of lines of
source code to understand the concept of a KIO slave. The KIO API is a very
neat feature of KDE - it provides a single, consistent way to access remote
and local filesystems. This is further expanded to KIO slaves which are
programs based on the KIO API which allow for a filesystem to be expressed in
a particular way. For instance, there is a KIO slave for displaying xattr file
&lt;a href="http://vhanda.in/blog/2014/07/tagging-your-files/"&gt;tags&lt;/a&gt; as a directory under
which each file marked to a tag would be displayed. KIO slaves even expand to
network protocols allowing for remote access using slaves such as http:/,
ftp:/, smb:/ (for Windows samba shares), fish:/, sftp:/, nfs:/, and webdav:/.
My project requires virtual folder constructed of URLs stored in a QList - an
ideal fit for KIO slaves.  &lt;/p&gt;
&lt;p&gt;However, hacking on KIO slaves was not exactly straightforward. Prior to my
GSoC selection, I had no idea on how to edit CMakeLists.txt files and it was a
task to learn to make one by hand. Initially, it felt like installing the
dependencies for building KIO slaves would almost certainly lead to me
destroying my KDE installation, and sure enough, I did manage to ruin my
installation. Most annoying. Fortunately, I managed to recover my data and
with a fresh install of Kubuntu 16.04 with all the required KDE packages, I
got back to working on getting the technical equivalent of a Hello World to
work with a KIO slave.  &lt;/p&gt;
&lt;p&gt;This too, was more than a matter of just copying and pasting lines of code
from the &lt;a href="https://techbase.kde.org/Development/Tutorials/KIO_Sla
ves/Hello_World"&gt;KDE tutorial&lt;/a&gt;. KIO slaves had dropped the use of .protocol files in the KF5
transition, instead opting for JSON files to store the properties of the KIO
slave. Thankfully, I had the assistance of the legendary &lt;a href="https://behindkde.org/david-faure-2"&gt;David
Faure&lt;/a&gt;. Under his guidance, I managed to
port the KIO slave in the tutorial to a KF5 compatible KIO slave and after a
full week of frustration of dealing with dependency hell, I saw the best Hello
World I could ever hope for:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://arnavdhamija.com/images/kioslave.png" /&gt;&lt;/p&gt;
&lt;p&gt;Baby steps. The next step was to make the KIO slave capable of displaying the
contents of a specified QUrl in a file manager. The documentation for
KProtocolManager made it seem like a pretty straightforward task - apparently
that all I needed to do was to add a "listing" entry in my JSON protocol file
and I would have to re-implement the listDir method inherited from SlaveBase
using a call to SlaveBase::listDir(&amp;amp;QUrl). Unbeknownst to me, the SlaveBase
class actually didn't have any code for displaying a directory! The SlaveBase
class was only for reimplementing its member functions in a derived class as I
found out by going through the source code of the core of kio/core. Learning
from my mistake here I switched to using a ForwardingSlaveBase class for my
KIO slave which instantly solved my problems of displaying a directory.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://arnavdhamija.com/images/helloslave.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fistpump&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;According to my timeline, the next steps in the project are  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Finishing off the KIO slave by the end of this month&lt;/li&gt;
&lt;li&gt;Making GUI modifications in Dolphin to accommodate the staging area&lt;/li&gt;
&lt;li&gt;Thinking of a better name for this feature?
So far, it's been a great experience to get so much support from the KDE
community. Here's to another two and a half months of KDE development!&lt;/li&gt;
&lt;/ol&gt;</summary><category term="GSoC"></category><category term="Programming"></category><category term="KDE"></category></entry><entry><title>It has happened - GSoC 2016 Selection!</title><link href="http://arnavdhamija.com/blog/it-has-happened.html" rel="alternate"></link><updated>2016-04-23T12:28:00+05:30</updated><author><name>Arnav Dhamija</name></author><id>tag:arnavdhamija.com,2016-04-23:blog/it-has-happened.html</id><summary type="html">&lt;p&gt;Wow!  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://arnavdhamija.com/images/photo_2016-04-23_12-26-30.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;I have been selected for the Google Summer of Code!  &lt;/p&gt;
&lt;p&gt;For the better part of the summer vacation, I will now be committing myself to
write code for &lt;a href="https://www.kde.org/"&gt;KDE&lt;/a&gt; to implement my project idea of
implementing a &lt;a href="https://goo.gl/BYOWdG"&gt;virtual folder in Dolphin&lt;/a&gt; to make it
easier to select files.  &lt;/p&gt;
&lt;p&gt;As a primer, the &lt;a href="http://g.co/gsoc"&gt;Google Summer of Code &lt;/a&gt;(GSoC) is an annual
event organized by Google for drawing students to work on open source projects
with a nice stipend, goodies, and fame. The GSoC is a term one would hear
pretty frequently when talking about the technical prowess and coding culture
of a college.  &lt;/p&gt;
&lt;p&gt;This year, BITS Pilani - Hyderabad Campus had a record number of a total of
&lt;strong&gt;7&lt;/strong&gt; selections! This is more than double of our previous record. This in
some ways, might be the start of the technical culture wave this campus was
looking for so long.  &lt;/p&gt;
&lt;p&gt;The File Tray idea for the GSoC came at a difficult time, hardly a month after
the entrance exams in 2015. It was at a time I was frustrated with everything
I had done and I didn't have any energy to pursue anything at all having been
completely drained out by the entrance exams prior to it. From there, the
project sat on the list of "Things I Might Do In The Distant Future". The
project idea was known only to a few close friends and my tiny programming
diary.  &lt;/p&gt;
&lt;p&gt;It was only till November 2015 when I stumbled across the GSoC. I began
looking at open source file managers for which I could implement my project
idea. I had been using Linux with various desktop environments for about 4
years at that point, so I had a pretty decent idea of what to look for.
Writing this feature for GNOME's Nautilus was the first thing I looked into as
I had been using Nautilus for a while and I was a big fan of Nautilus's simple
to use interface. But, the problem was that Nautilus was a C/GTK+ project and
I had no desire to move on to using C after having C++ in my comfort zone for
a very long time. Fortunately, Dolphin, one of the best file managers I had
used since my days of using KDE, used C++/Qt, a toolset I am much better with.
I felt my project idea was a natural fit for Dolphin's Split view mode. KDE
also had an excellent record in the GSoC with a very good number of slots and
a high percentage of successful projects. This began my tryst with Open Source
development.  &lt;/p&gt;
&lt;p&gt;From there on, I taught myself &lt;a href="http://www.qt.io/"&gt;Qt&lt;/a&gt; and during a Diwali
vacation on campus, I managed to make a very rough &lt;a href="https://github.com/shortstheory/filetray-very-early-alpha-idea-
thingy"&gt;prototype
application&lt;/a&gt; of my project after coding for 6 hours straight from 11pm to 5am the
next day. Following this, I subscribed to KDE's mailing lists and after
lurking around for a while, I started asking for feedback on my GSoC idea.
With surprisingly positive feedback from numerous KDE developers, I realized
that there might just be a non-zero chance of getting selected.  &lt;/p&gt;
&lt;p&gt;Things quickly began falling into place and I then moved on to the next step
of hunting around for bugs I could fix and new features I could implement for
Dolphin. The bug-fixing was as enjoyable as it was occasionally frustrating.
Reading over 20000 lines of code certainly took its toll when I had no idea
when how different parts of the application meshed together. In the end,
thanks to the guidance of Dolphin maintainer, Emmanuel Pescosta, I managed to
fix a couple of things for Dolphin and moved on to the next step of making a
proposal for my GSoC application.  &lt;/p&gt;
&lt;p&gt;Starting off with making a competent proposal was like launching off ground
zero as there were very few people who had successfully completed the GSoC
from our campus and most of these people had graduated well before this time.
I started digging around for proposals accepted by KDE in previous GSoC's.
What I couldn't get from all the proposals was some sound advice from seniors.
In particular, &lt;a href="https://github.com/naveenjafer"&gt;Naveen Jafer bhaiya&lt;/a&gt; (who also
went on to achieve a GSoC project of his own!) helped me with making my
proposal as good as possible. In the end, after painstakingly checking every
word in my proposal for what felt like the fiftieth time I submitted it on 25
March, only to spend an anxious month waiting for the results which came out
at 1230am IST on April 23. While it still hasn't sunk in yet (!), I am sure
that this will make for an awesome summer vacation!&lt;/p&gt;</summary><category term="GSoC"></category><category term="KDE"></category></entry><entry><title>GSoC 2016 Project Survey, help me make Dolphin a better File Manager!</title><link href="http://arnavdhamija.com/blog/gsoc-2016-project-survey-help-me-make.html" rel="alternate"></link><updated>2016-02-15T21:16:00+05:30</updated><author><name>Arnav Dhamija</name></author><id>tag:arnavdhamija.com,2016-02-15:blog/gsoc-2016-project-survey-help-me-make.html</id><summary type="html">&lt;p&gt;Hey everyone!  &lt;/p&gt;
&lt;p&gt;I am a first year computer science undergraduate from BITS Pilani, Hyderabad
Campus. I am looking forward to working for KDE for the GSoC.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://developers.google.com/open-source/gsoc/resources/downloads/GSoC2016Logo.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;My project idea is based on solving a problem all file managers have had for
years - the lack of an easy to use file selection tool. My project aims to
simplify selecting files from multiple directory trees.  &lt;/p&gt;
&lt;p&gt;I am running a survey to gauge community feedback on my idea and to finalize
the user interface and features list.  &lt;/p&gt;
&lt;p&gt;The link to my idea proposal can be found here: &lt;a href="https://goo.gl/1Nj4SY"&gt;https://goo.gl/1Nj4SY&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;And the link to my survey can be found here: &lt;a href="https://goo.gl/forms/5JSZXNganX"&gt;https://goo.gl/forms/5JSZXNganX&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;TIA for the feedback : )&lt;/p&gt;</summary><category term="GSoC"></category><category term="Programming"></category><category term="KDE"></category></entry></feed>